import java.util.Hashtable;
import java.util.Vector;

public class Algorithms {
	public static int[][] sequences = {
		{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63 },
		{ 3, 7, 11, 15, 2, 6, 10, 14, 1, 5, 9, 13, 0, 4, 8, 12, 19, 23, 27, 31, 18, 22, 26, 30, 17, 21, 25, 29, 16, 20, 24, 28, 35, 39, 43, 47, 34, 38, 42, 46, 33, 37, 41, 45, 32, 36, 40, 44, 51, 55, 59, 63, 50, 54, 58, 62, 49, 53, 57, 61, 48, 52, 56, 60 },
		{ 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48 },
		{ 12, 8, 4, 0, 13, 9, 5, 1, 14, 10, 6, 2, 15, 11, 7, 3, 28, 24, 20, 16, 29, 25, 21, 17, 30, 26, 22, 18, 31, 27, 23, 19, 44, 40, 36, 32, 45, 41, 37, 33, 46, 42, 38, 34, 47, 43, 39, 35, 60, 56, 52, 48, 61, 57, 53, 49, 62, 58, 54, 50, 63, 59, 55, 51 },
		{ 0, 16, 32, 48, 1, 17, 33, 49, 2, 18, 34, 50, 3, 19, 35, 51, 4, 20, 36, 52, 5, 21, 37, 53, 6, 22, 38, 54, 7, 23, 39, 55, 8, 24, 40, 56, 9, 25, 41, 57, 10, 26, 42, 58, 11, 27, 43, 59, 12, 28, 44, 60, 13, 29, 45, 61, 14, 30, 46, 62, 15, 31, 47, 63 },
		{ 3, 19, 35, 51, 7, 23, 39, 55, 11, 27, 43, 59, 15, 31, 47, 63, 2, 18, 34, 50, 6, 22, 38, 54, 10, 26, 42, 58, 14, 30, 46, 62, 1, 17, 33, 49, 5, 21, 37, 53, 9, 25, 41, 57, 13, 29, 45, 61, 0, 16, 32, 48, 4, 20, 36, 52, 8, 24, 40, 56, 12, 28, 44, 60 },
		{ 15, 31, 47, 63, 14, 30, 46, 62, 13, 29, 45, 61, 12, 28, 44, 60, 11, 27, 43, 59, 10, 26, 42, 58, 9, 25, 41, 57, 8, 24, 40, 56, 7, 23, 39, 55, 6, 22, 38, 54, 5, 21, 37, 53, 4, 20, 36, 52, 3, 19, 35, 51, 2, 18, 34, 50, 1, 17, 33, 49, 0, 16, 32, 48 },
		{ 12, 28, 44, 60, 8, 24, 40, 56, 4, 20, 36, 52, 0, 16, 32, 48, 13, 29, 45, 61, 9, 25, 41, 57, 5, 21, 37, 53, 1, 17, 33, 49, 14, 30, 46, 62, 10, 26, 42, 58, 6, 22, 38, 54, 2, 18, 34, 50, 15, 31, 47, 63, 11, 27, 43, 59, 7, 23, 39, 55, 3, 19, 35, 51 },
		{ 0, 4, 8, 12, 1, 5, 9, 13, 2, 6, 10, 14, 3, 7, 11, 15, 16, 20, 24, 28, 17, 21, 25, 29, 18, 22, 26, 30, 19, 23, 27, 31, 32, 36, 40, 44, 33, 37, 41, 45, 34, 38, 42, 46, 35, 39, 43, 47, 48, 52, 56, 60, 49, 53, 57, 61, 50, 54, 58, 62, 51, 55, 59, 63 },
		{ 3, 2, 1, 0, 7, 6, 5, 4, 11, 10, 9, 8, 15, 14, 13, 12, 19, 18, 17, 16, 23, 22, 21, 20, 27, 26, 25, 24, 31, 30, 29, 28, 35, 34, 33, 32, 39, 38, 37, 36, 43, 42, 41, 40, 47, 46, 45, 44, 51, 50, 49, 48, 55, 54, 53, 52, 59, 58, 57, 56, 63, 62, 61, 60 },
		{ 15, 11, 7, 3, 14, 10, 6, 2, 13, 9, 5, 1, 12, 8, 4, 0, 31, 27, 23, 19, 30, 26, 22, 18, 29, 25, 21, 17, 28, 24, 20, 16, 47, 43, 39, 35, 46, 42, 38, 34, 45, 41, 37, 33, 44, 40, 36, 32, 63, 59, 55, 51, 62, 58, 54, 50, 61, 57, 53, 49, 60, 56, 52, 48 },
		{ 12, 13, 14, 15, 8, 9, 10, 11, 4, 5, 6, 7, 0, 1, 2, 3, 28, 29, 30, 31, 24, 25, 26, 27, 20, 21, 22, 23, 16, 17, 18, 19, 44, 45, 46, 47, 40, 41, 42, 43, 36, 37, 38, 39, 32, 33, 34, 35, 60, 61, 62, 63, 56, 57, 58, 59, 52, 53, 54, 55, 48, 49, 50, 51 },
	};

	public static Hashtable<Long, Integer> htable = new Hashtable<>();
	public static long mod = (long)Math.pow(2, 32);

	public static int alphaBetaPruning(GameState gameState, int depth, int alpha, int beta, int player, Deadline deadline, long TIME_THRESHOLD) {
		if(deadline.timeUntil() < TIME_THRESHOLD) {
			if(player == 1) { return Integer.MIN_VALUE; }
			else return Integer.MAX_VALUE;
		}

		int v = 0;
		if(gameState.isEOG() || depth == 0)  {
			long number = 0;
			for(int i = 0; i < 64; i++) {
				number = (number + ((long)Math.pow(3, i) % mod) * gameState.at(i)) % mod;
			}
			if(htable.containsKey(number)) {
				return htable.get(number);
			}
			v = gamma(gameState);
		}
		else if(player == 1) { // If player = X
			v = -Integer.MIN_VALUE;
			Vector<GameState> nextStates = new Vector<GameState>();
			gameState.findPossibleMoves(nextStates);
			for(int i = 0; i < nextStates.size(); i++) {
				v = Math.max(v, alphaBetaPruning(nextStates.elementAt(i), depth-1, alpha, beta, 2, deadline, TIME_THRESHOLD));
				alpha = Math.max(v, alpha);
				if(beta <= alpha) {
					break;
				}
			}
		} else { // If player = O
			v = Integer.MAX_VALUE;
			Vector<GameState> nextStates = new Vector<GameState>();
			gameState.findPossibleMoves(nextStates);
			for(int i = 0; i < nextStates.size(); i++) {
				v = Math.min(v, alphaBetaPruning(nextStates.elementAt(i), depth-1, alpha, beta, 1, deadline, TIME_THRESHOLD));
				beta = Math.min(v, beta);
				if(beta <= alpha) {
					break;
				}
			}
		}
		return v;
	}

	public static int gamma(GameState gameState) {
		int score = 0;
		if(gameState.isOWin()) {
			score = Integer.MIN_VALUE;
		} else if(gameState.isXWin()) {
			score =  Integer.MAX_VALUE;
		} else if(gameState.isEOG()) {
			return 0;
		}
		else {

			// 1 Point for piece in the center
			for(int i = 1; i < 3; i++) {
				for(int j = 1; j < 3; j++) {
					for(int k = 1; k < 3; k++) {
						if(gameState.at(i, j, k) == Constants.CELL_X) {
							score += 1;
						}
						if(gameState.at(i, j, k) == Constants.CELL_O) {
							score -= 1;
						}
					}
				}
			}
			
			for(int lay = 0; lay < 4; lay++) {

				// Point for rows 16
				for(int col = 0; col < 4; col++) {
					int xCnt = 0;
					int oCnt = 0;
					for(int row = 0; row < 4; row++) {
						if(gameState.at(row, col, lay) == Constants.CELL_X) { xCnt++; }
						if(gameState.at(row, col, lay) == Constants.CELL_O) { oCnt++; }
					}
					if(oCnt == 0 && xCnt > 0) {
						score += Math.pow(10, xCnt);
					} else if(xCnt == 0 && oCnt > 0) {
						score -= Math.pow(10, xCnt);
					}
				}
				
				// Point for cols 16
				for(int row = 0; row < 4; row++) {
					int xCnt = 0;
					int oCnt = 0;
					for(int col = 0; col < 4; col++) {
						if(gameState.at(row, col, lay) == Constants.CELL_X) { xCnt++; }
						if(gameState.at(row, col, lay) == Constants.CELL_O) { oCnt++; }
					}
					if(oCnt == 0 && xCnt > 0) {
						score += Math.pow(10, xCnt);
					} else if(xCnt == 0 && oCnt > 0) {
						score -= Math.pow(10, xCnt);
					}
				}
				
				// Points for diagonal 4
				int xCnt = 0;
				int oCnt = 0;
				for(int diag = 0; diag < 4; diag++) {
					if(gameState.at(diag, diag, lay) == Constants.CELL_X) { xCnt++; }
					if(gameState.at(diag, diag, lay) == Constants.CELL_O) { oCnt++; }
				}
				if(oCnt == 0 && xCnt > 0) {
					score += Math.pow(10, xCnt);
				} else if(xCnt == 0 && oCnt > 0) {
					score -= Math.pow(10, xCnt);
				}

				// Points for reverse diagonal 4
				xCnt = 0;
				oCnt = 0;
				for(int diag = 0; diag < 4; diag++) {
					if(gameState.at(diag, 3-diag, lay) == Constants.CELL_X) { xCnt++; }
					if(gameState.at(diag, 3-diag, lay) == Constants.CELL_O) { oCnt++; }
				}
				if(oCnt == 0 && xCnt > 0) {
					score += Math.pow(10, xCnt);
				} else if(xCnt == 0 && oCnt > 0) {
					score -= Math.pow(10, xCnt);
				}
			}
			// Points for layers 16
			for(int row = 0; row < 4; row++) {
				for(int col = 0; col < 4; col++) {
					int xCnt = 0;
					int oCnt = 0;
					for(int lay = 0; lay < 4; lay++) {
						if(gameState.at(row, col, lay) == Constants.CELL_X) { xCnt++; }
						if(gameState.at(row, col, lay) == Constants.CELL_O) { oCnt++; }
					}
					if(oCnt == 0 && xCnt > 0) {
						score += Math.pow(10, xCnt);
					} else if(xCnt == 0 && oCnt > 0) {
						score -= Math.pow(10, xCnt);
					}
				}
			}

			//  8
			for(int row = 0; row < 4; row++) {
				int xCnt = 0;
				int oCnt = 0;
				for(int diag = 0; diag < 4; diag++) {
					if(gameState.at(row, diag, diag) == Constants.CELL_X) { xCnt++; }
					if(gameState.at(row, diag, diag) == Constants.CELL_O) { oCnt++; }
				}
				if(oCnt == 0 && xCnt > 0) {
					score += Math.pow(10, xCnt);
				} else if(xCnt == 0 && oCnt > 0) {
					score -= Math.pow(10, xCnt);
				}

				xCnt = 0;
				oCnt = 0;
				
				for(int diag = 0; diag < 4; diag++) {
					if(gameState.at(row, diag, 3-diag) == Constants.CELL_X) { xCnt++; }
					if(gameState.at(row, diag, 3-diag) == Constants.CELL_O) { oCnt++; }
				}
				if(oCnt == 0 && xCnt > 0) {
					score += Math.pow(10, xCnt);
				} else if(xCnt == 0 && oCnt > 0) {
					score -= Math.pow(10, xCnt);
				}
			}
			// 8
			for(int col = 0; col < 4; col++) {
				int xCnt = 0;
				int oCnt = 0;
				for(int diag = 0; diag < 4; diag++) {
					if(gameState.at(diag, col, diag) == Constants.CELL_X) { xCnt++; }
					if(gameState.at(diag, col, diag) == Constants.CELL_O) { oCnt++; }
				}
				if(oCnt == 0 && xCnt > 0) {
					score += Math.pow(10, xCnt);
				} else if(xCnt == 0 && oCnt > 0) {
					score -= Math.pow(10, xCnt);
				}

				xCnt = 0;
				oCnt = 0;

				for(int diag = 0; diag < 4; diag++) {
					if(gameState.at(diag, col, 3-diag) == Constants.CELL_X) { xCnt++; }
					if(gameState.at(diag, col, 3-diag) == Constants.CELL_O) { oCnt++; }
				}
				if(oCnt == 0 && xCnt > 0) {
					score += Math.pow(10, xCnt);
				} else if(xCnt == 0 && oCnt > 0) {
					score -= Math.pow(10, xCnt);
				}
			}

			// 1
			int xCnt = 0;
			int oCnt = 0;
			for(int diag = 0; diag < 4; diag++) {
				if(gameState.at(diag, diag, diag) == Constants.CELL_X) { xCnt++; }
				if(gameState.at(diag, diag, diag) == Constants.CELL_O) { oCnt++; }
			}
			if(oCnt == 0 && xCnt > 0) {
				score += Math.pow(10, xCnt);
			} else if(xCnt == 0 && oCnt > 0) {
				score -= Math.pow(10, xCnt);
			}

			// 1
			xCnt = 0;
			oCnt = 0;
			for(int diag = 0; diag < 4; diag++) {
				if(gameState.at(3-diag, diag, diag) == Constants.CELL_X) { xCnt++; }
				if(gameState.at(3-diag, diag, diag) == Constants.CELL_O) { oCnt++; }
			}
			if(oCnt == 0 && xCnt > 0) {
				score += Math.pow(10, xCnt);
			} else if(xCnt == 0 && oCnt > 0) {
				score -= Math.pow(10, xCnt);
			}
			
			// 1
			xCnt = 0;
			oCnt = 0;
			for(int diag = 0; diag < 4; diag++) {
				if(gameState.at(diag, 3-diag, diag) == Constants.CELL_X) { xCnt++; }
				if(gameState.at(diag, 3-diag, diag) == Constants.CELL_O) { oCnt++; }
			}
			if(oCnt == 0 && xCnt > 0) {
				score += Math.pow(10, xCnt);
			} else if(xCnt == 0 && oCnt > 0) {
				score -= Math.pow(10, xCnt);
			}

			// 1
			xCnt = 0;
			oCnt = 0;
			for(int diag = 0; diag < 4; diag++) {
				if(gameState.at(diag, diag, 3-diag) == Constants.CELL_X) { xCnt++; }
				if(gameState.at(diag, diag, 3-diag) == Constants.CELL_O) { oCnt++; }
			}
			if(oCnt == 0 && xCnt > 0) {
				score += Math.pow(10, xCnt);
			} else if(xCnt == 0 && oCnt > 0) {
				score -= Math.pow(10, xCnt);
			}

			for(int i = 0; i < 12; i++) {
				long number = 0;
				for(int j = 0; j < 64; j++) { 
					number = (number + (long)Math.pow(3, sequences[i][j]) * gameState.at(j)) % mod;
				}
				htable.put(number, score);
				number = 0;
				for(int j = 0; j < 64; j++) { 
					number = (number + ((long)Math.pow(3, sequences[i][63-j] % mod)) * gameState.at(j)) % mod;
				}
				htable.put(number, score);
			}
		}
		return score;
	}
}

public static int alphaBetaSearch(GameState gameState, int depth, int player) {
	int v = 0;
	if(player == 1)
		v = maxValue(gameState, Integer.MIN_VALUE, Integer.MAX_VALUE, depth, player);
	else
		v = minValue(gameState, Integer.MIN_VALUE, Integer.MAX_VALUE, depth, player);
	return v;
}

public static int maxValue(GameState gameState, int alpha, int beta, int depth, int player) {
	if(gameState.isEOG() || depth > 3) {
		return gamma(gameState, 1);
	}
	int v = Integer.MIN_VALUE;
	Vector<GameState> nextStates = new Vector<GameState>();
	gameState.findPossibleMoves(nextStates);
	for(int i = 0; i < nextStates.size(); i++) {
		v = Math.max(v, minValue(nextStates.elementAt(i), alpha, beta, depth+1, nextStates.elementAt(i).getNextPlayer()));
		if(v >= beta) {
			return v;
		}
		alpha = Math.max(alpha, v);
	}
	return v;
}

public static int minValue(GameState gameState, int alpha, int beta, int depth, int player){
	if(gameState.isEOG() || depth > 3) {
		return gamma(gameState, 2);
	}
	int v = Integer.MAX_VALUE;
	Vector<GameState> nextStates = new Vector<GameState>();
	gameState.findPossibleMoves(nextStates);
	for(int i = 0; i < nextStates.size(); i++) {
		v = Math.min(v, maxValue(nextStates.elementAt(i), alpha, beta, depth+1, nextStates.elementAt(i).getNextPlayer()));
		if(v <= alpha) {
			return v;
		}
		beta = Math.min(beta, v);
	}
	return v;
}